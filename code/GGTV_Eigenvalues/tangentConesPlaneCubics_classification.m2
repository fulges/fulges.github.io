restart

-- initialize three rings:
-- R for the variables of the cubic
-- A for the coefficients of a cubic
-- S for the free parameter on a pencil

R = QQ[x_0..x_2]
A = QQ[apply(compositions(3,3), iii-> a_iii)]
S = QQ[s]
AR = A**R**S

-- initialize vectors for the x and a variables
-- and a general polynomial fgen with variable coefficients
xx = sub(vars(R),AR)
aa = sub(vars(A),AR)

fgen = 6*sum(compositions(3,3), iii-> (
	a_iii * product(3, j-> 1/(iii_j)!*x_j^(iii_j))))

-- the file cubicInvs.m2 contains a hardcoded expression 
-- of the discriminant of plane cubics; we use it to define
-- a handy function that evaluates it.
load "cubicInvs.m2"

Disc = ff -> (
    apply(compositions(3,3), cc -> (
	    mm = product(3, j-> x_j^(cc_j));
	    ee_cc = diff(mm,ff)));
    disc())

-- we compute the tangent cone in every case of the 
-- classification of plane cubics. For each orbit:
-- f is the pencil of cubics generated by the singular cubic
-- and the generic cubic;
-- D is the discriminant evaluate at f: it is a univariate polynomial in s 
-- whose coefficients depend on the variables a;
-- m is the 'guessed multiplicity': we verify that the multiplicity of the
-- singular cubic is indeed m;
-- for j from 0 to m-1, we verify that the coefficient of s^j in D is 0;
-- we display the m-th coefficient: the user should observe that indeed
-- it coincides with the equation of the claimed tangent cone in the text.


--- generic nodal cubic:
f = x_2^2 * x_0 - x_1^2*(x_1+x_0) + s * fgen 

D = Disc(f);

m = 1
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- cuspidal cubic
f = x_2^2*x_0 - x_1^3 + s * fgen

D = Disc(f);

m = 2
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- generic reducible cubic ( conic + secant line)
f = x_0 * (x_0^2 + x_1*x_2) + s * fgen

D = Disc(f);

m = 2
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- degenerate reducible cubic (conic + tangent line)
f = x_0 * (x_0 * x_1 + x_2^2)+ s * fgen

D = Disc(f);

m = 3
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- triangles (product of three linearly independent lines)
f = x_0 * x_1*x_2 + s * fgen

D = Disc(f);

m = 3
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- stars (product of three lines, not linearly independent)
f = x_0*x_1*(x_0+x_1)+ s * fgen

D = Disc(f);

m = 4
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)


--- line and double line 
f = x_0^2 * x_1+ s * fgen

D = Disc(f);

m = 6
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)
factor TCf


--- triple line
f = x_0^3 +  s * fgen

D = Disc(f);

m = 8
apply(m, j-> sub(diff(s^j,D),s=>0))
TCf = sub(diff(s^m,D), s=>0)
factor TCf

